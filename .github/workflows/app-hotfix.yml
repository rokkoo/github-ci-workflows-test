name: App hotfix Process

on:
  workflow_dispatch:
    inputs:
      tagName:
        description: "Tag of the latest stable version"
        required: true
      hotfixBranch:
        description: "Name of the hotfix branch"
        required: true
        default: "hotfix/"

jobs:
  create-hotfix:
    runs-on: ubuntu-latest
    # https://github.com/orgs/community/discussions/35410#discussioncomment-7645702
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_SECRET }}

      - name: Set up environment variables
        id: setup-env
        run: |
          echo "TAG_NAME=${{ github.event.inputs.tagName }}" >> $GITHUB_ENV
          echo "HOTFIX_BRANCH=${{ github.event.inputs.hotfixBranch }}" >> $GITHUB_ENV

      - name: Validate tag and create hotfix branch
        run: |
          #!/bin/bash
          set -e

          # Check if the tag exists
          if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
            echo "Tag $TAG_NAME exists. Creating hotfix branch $HOTFIX_BRANCH from $TAG_NAME."
          else
            echo "Tag $TAG_NAME does not exist. Exiting."
            exit 1
          fi

      - name: Create hotfix branch
        run: |
          #!/bin/bash
          set -e

          # Create a new branch from the tag
          git checkout -b $HOTFIX_BRANCH $TAG_NAME
          git push origin $HOTFIX_BRANCH

  remove-hotfix-branch:
    needs: create-hotfix
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up environment variables
        id: setup-env
        run: |
          echo "TAG_NAME=${{ github.event.inputs.tagName }}" >> $GITHUB_ENV
          echo "HOTFIX_BRANCH=${{ github.event.inputs.hotfixBranch }}" >> $GITHUB_ENV

      # we need to create new tag for the hotfix branch

      - name: Delete hotfix branch
        run: |
          #!/bin/bash
          set -e

          # Ensure we are not deleting the main branch
          if [ "$HOTFIX_BRANCH" == "main" ]; then
            echo "Cannot delete the main branch."
            exit 1
          fi

          # Delete the hotfix branch locally and remotely
          git push origin --delete $HOTFIX_BRANCH
        shell: bash
