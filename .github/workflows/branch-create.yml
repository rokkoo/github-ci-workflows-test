name: generate-app-release

on:
  workflow_dispatch:
    inputs:
      branch_name:
        description: "Current version branch name"
        required: true
        default: "1.0.0"
      releaseType:
        description: "Release version type"
        required: true
        default: "minor"
        type: choice
        options:
          - major
          - minor
          - patch

jobs:
  generate-app-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up environment variables
        id: setup-env
        run: |
          echo "BRANCH_NAME=${{ github.event.inputs.branch_name }}" >> $GITHUB_ENV
          echo "RELEASE_TYPE=${{ github.event.inputs.releaseType }}" >> $GITHUB_ENV

      - name: Increment version based on release type
        id: increment-version
        run: |
          echo "Current branch name: ${BRANCH_NAME}"

          # Extract major, minor, and patch from the branch name
          IFS='.' read -r major minor patch <<< "${BRANCH_NAME#release/}"

          # Check if the extraction was successful
          if [[ -z "$major" || -z "$minor" || -z "$patch" ]]; then
            echo "Failed to parse version from branch name."
            exit 1
          fi

          echo "Extracted version: major=${major}, minor=${minor}, patch=${patch}"

          # Increment version based on release type
          case "${RELEASE_TYPE}" in
            major)
              major=$((major + 1))
              minor=0
              patch=0
              ;;
            minor)
              minor=$((minor + 1))
              patch=0
              ;;
            patch)
              patch=$((patch + 1))
              ;;
            *)
              echo "Invalid releaseType value. Expected 'major', 'minor', or 'patch'."
              exit 1
              ;;
          esac

          NEW_BRANCH_NAME="release/${major}.${minor}.${patch}"
          echo "NEW_BRANCH_NAME=${NEW_BRANCH_NAME}" >> $GITHUB_ENV
          echo "New branch name: ${NEW_BRANCH_NAME}"

      - name: Fetch all branches
        run: git fetch --all

      - name: Check if branch exists
        id: check-branch
        run: |
          if git show-ref --quiet refs/heads/"$NEW_BRANCH_NAME" || git show-ref --quiet refs/remotes/origin/"$NEW_BRANCH_NAME"; then
            echo "Branch '${NEW_BRANCH_NAME}' already exists."
            exit 1
          else
            echo "Branch '${NEW_BRANCH_NAME}' does not exist."
          fi

      - name: Create release branch
        run: |
          git checkout -b $NEW_BRANCH_NAME
          git push origin $NEW_BRANCH_NAME
        env:
          SECRET: ${{ secrets.GH_SECRET }}
